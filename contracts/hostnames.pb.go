// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hostnames.proto

package contracts

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HostnamePaths struct {
	Hostname                string            `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	NumReqsPerMinuteAllowed uint32            `protobuf:"varint,2,opt,name=numReqsPerMinuteAllowed,proto3" json:"numReqsPerMinuteAllowed,omitempty"`
	Paths                   map[string]*Empty `protobuf:"bytes,3,rep,name=paths,proto3" json:"paths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral    struct{}          `json:"-"`
	XXX_unrecognized        []byte            `json:"-"`
	XXX_sizecache           int32             `json:"-"`
}

func (m *HostnamePaths) Reset()         { *m = HostnamePaths{} }
func (m *HostnamePaths) String() string { return proto.CompactTextString(m) }
func (*HostnamePaths) ProtoMessage()    {}
func (*HostnamePaths) Descriptor() ([]byte, []int) {
	return fileDescriptor_657d3bceea183cea, []int{0}
}

func (m *HostnamePaths) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostnamePaths.Unmarshal(m, b)
}
func (m *HostnamePaths) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostnamePaths.Marshal(b, m, deterministic)
}
func (m *HostnamePaths) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostnamePaths.Merge(m, src)
}
func (m *HostnamePaths) XXX_Size() int {
	return xxx_messageInfo_HostnamePaths.Size(m)
}
func (m *HostnamePaths) XXX_DiscardUnknown() {
	xxx_messageInfo_HostnamePaths.DiscardUnknown(m)
}

var xxx_messageInfo_HostnamePaths proto.InternalMessageInfo

func (m *HostnamePaths) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *HostnamePaths) GetNumReqsPerMinuteAllowed() uint32 {
	if m != nil {
		return m.NumReqsPerMinuteAllowed
	}
	return 0
}

func (m *HostnamePaths) GetPaths() map[string]*Empty {
	if m != nil {
		return m.Paths
	}
	return nil
}

type MultipleHostnamePaths struct {
	Urls                 []*HostnamePaths `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MultipleHostnamePaths) Reset()         { *m = MultipleHostnamePaths{} }
func (m *MultipleHostnamePaths) String() string { return proto.CompactTextString(m) }
func (*MultipleHostnamePaths) ProtoMessage()    {}
func (*MultipleHostnamePaths) Descriptor() ([]byte, []int) {
	return fileDescriptor_657d3bceea183cea, []int{1}
}

func (m *MultipleHostnamePaths) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultipleHostnamePaths.Unmarshal(m, b)
}
func (m *MultipleHostnamePaths) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultipleHostnamePaths.Marshal(b, m, deterministic)
}
func (m *MultipleHostnamePaths) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultipleHostnamePaths.Merge(m, src)
}
func (m *MultipleHostnamePaths) XXX_Size() int {
	return xxx_messageInfo_MultipleHostnamePaths.Size(m)
}
func (m *MultipleHostnamePaths) XXX_DiscardUnknown() {
	xxx_messageInfo_MultipleHostnamePaths.DiscardUnknown(m)
}

var xxx_messageInfo_MultipleHostnamePaths proto.InternalMessageInfo

func (m *MultipleHostnamePaths) GetUrls() []*HostnamePaths {
	if m != nil {
		return m.Urls
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_657d3bceea183cea, []int{2}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HostnamePaths)(nil), "contracts.HostnamePaths")
	proto.RegisterMapType((map[string]*Empty)(nil), "contracts.HostnamePaths.PathsEntry")
	proto.RegisterType((*MultipleHostnamePaths)(nil), "contracts.MultipleHostnamePaths")
	proto.RegisterType((*Empty)(nil), "contracts.Empty")
}

func init() {
	proto.RegisterFile("hostnames.proto", fileDescriptor_657d3bceea183cea)
}

var fileDescriptor_657d3bceea183cea = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xd1, 0x4a, 0xc3, 0x30,
	0x18, 0x85, 0x97, 0xcd, 0xa9, 0xfb, 0xe7, 0x70, 0x44, 0xc4, 0xd2, 0xab, 0x52, 0x41, 0x7a, 0x21,
	0xbd, 0xa8, 0x37, 0x53, 0xaf, 0x44, 0x0b, 0x22, 0x0c, 0x46, 0xde, 0x20, 0xae, 0xc1, 0x15, 0xd3,
	0xa4, 0x26, 0x7f, 0x95, 0xbe, 0x89, 0x0f, 0xe9, 0x43, 0xc8, 0xb2, 0x75, 0x6e, 0xcc, 0xde, 0x84,
	0xe4, 0x3f, 0x27, 0xe7, 0x7c, 0x21, 0x70, 0xba, 0xd0, 0x16, 0x15, 0x2f, 0x84, 0x8d, 0x4b, 0xa3,
	0x51, 0xd3, 0xc1, 0x5c, 0x2b, 0x34, 0x7c, 0x8e, 0x36, 0xfc, 0x21, 0x30, 0x7a, 0x5e, 0xcb, 0x33,
	0x8e, 0x0b, 0x4b, 0x7d, 0x38, 0x6e, 0xfc, 0x1e, 0x09, 0x48, 0x34, 0x60, 0x9b, 0x33, 0x9d, 0xc0,
	0x85, 0xaa, 0x0a, 0x26, 0x3e, 0xec, 0x4c, 0x98, 0x69, 0xae, 0x2a, 0x14, 0x0f, 0x52, 0xea, 0x2f,
	0x91, 0x79, 0xdd, 0x80, 0x44, 0x23, 0xd6, 0x26, 0xd3, 0x5b, 0xe8, 0x97, 0xcb, 0x78, 0xaf, 0x17,
	0xf4, 0xa2, 0x61, 0x72, 0x19, 0x6f, 0x10, 0xe2, 0x9d, 0xfa, 0xd8, 0xad, 0xa9, 0x42, 0x53, 0xb3,
	0xd5, 0x0d, 0xff, 0x05, 0xe0, 0x6f, 0x48, 0xc7, 0xd0, 0x7b, 0x17, 0xf5, 0x9a, 0x6c, 0xb9, 0xa5,
	0x57, 0xd0, 0xff, 0xe4, 0xb2, 0x12, 0x0e, 0x61, 0x98, 0x8c, 0xb7, 0xa2, 0xd3, 0xa2, 0xc4, 0x9a,
	0xad, 0xe4, 0xbb, 0xee, 0x84, 0x84, 0x29, 0x9c, 0x4f, 0x2b, 0x89, 0x79, 0x29, 0xc5, 0xee, 0xab,
	0xaf, 0xe1, 0xa0, 0x32, 0xd2, 0x7a, 0xc4, 0xe1, 0x79, 0x6d, 0x78, 0xcc, 0xb9, 0xc2, 0x23, 0xe8,
	0xbb, 0xe8, 0xe4, 0x9b, 0xc0, 0x59, 0x63, 0x78, 0xd4, 0xda, 0x64, 0xb9, 0xe2, 0xa8, 0x0d, 0xbd,
	0x87, 0xe1, 0x9b, 0xc0, 0x46, 0xa1, 0x7b, 0x4c, 0x7e, 0x6b, 0x43, 0xd8, 0xa1, 0x4f, 0x70, 0xc2,
	0xb3, 0xac, 0x99, 0x5a, 0x1a, 0x6c, 0x79, 0xff, 0xa5, 0xf7, 0xf7, 0xf2, 0xc3, 0xce, 0xeb, 0xa1,
	0xfb, 0xeb, 0x9b, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x3f, 0xd7, 0x6c, 0xfe, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HostnameCoordinatorClient is the client API for HostnameCoordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HostnameCoordinatorClient interface {
	GetHostname(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HostnamePaths, error)
	AddHostnames(ctx context.Context, in *MultipleHostnamePaths, opts ...grpc.CallOption) (*Empty, error)
}

type hostnameCoordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewHostnameCoordinatorClient(cc grpc.ClientConnInterface) HostnameCoordinatorClient {
	return &hostnameCoordinatorClient{cc}
}

func (c *hostnameCoordinatorClient) GetHostname(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HostnamePaths, error) {
	out := new(HostnamePaths)
	err := c.cc.Invoke(ctx, "/contracts.HostnameCoordinator/getHostname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostnameCoordinatorClient) AddHostnames(ctx context.Context, in *MultipleHostnamePaths, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/contracts.HostnameCoordinator/addHostnames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostnameCoordinatorServer is the server API for HostnameCoordinator service.
type HostnameCoordinatorServer interface {
	GetHostname(context.Context, *Empty) (*HostnamePaths, error)
	AddHostnames(context.Context, *MultipleHostnamePaths) (*Empty, error)
}

// UnimplementedHostnameCoordinatorServer can be embedded to have forward compatible implementations.
type UnimplementedHostnameCoordinatorServer struct {
}

func (*UnimplementedHostnameCoordinatorServer) GetHostname(ctx context.Context, req *Empty) (*HostnamePaths, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostname not implemented")
}
func (*UnimplementedHostnameCoordinatorServer) AddHostnames(ctx context.Context, req *MultipleHostnamePaths) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHostnames not implemented")
}

func RegisterHostnameCoordinatorServer(s *grpc.Server, srv HostnameCoordinatorServer) {
	s.RegisterService(&_HostnameCoordinator_serviceDesc, srv)
}

func _HostnameCoordinator_GetHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostnameCoordinatorServer).GetHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contracts.HostnameCoordinator/GetHostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostnameCoordinatorServer).GetHostname(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostnameCoordinator_AddHostnames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultipleHostnamePaths)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostnameCoordinatorServer).AddHostnames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contracts.HostnameCoordinator/AddHostnames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostnameCoordinatorServer).AddHostnames(ctx, req.(*MultipleHostnamePaths))
	}
	return interceptor(ctx, in, info, handler)
}

var _HostnameCoordinator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "contracts.HostnameCoordinator",
	HandlerType: (*HostnameCoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getHostname",
			Handler:    _HostnameCoordinator_GetHostname_Handler,
		},
		{
			MethodName: "addHostnames",
			Handler:    _HostnameCoordinator_AddHostnames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hostnames.proto",
}
